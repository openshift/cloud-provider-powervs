name: Gatekeeper

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  gatekeeper:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for all other workflows
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.pull_request.head.sha;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const gatekeeperName = "gatekeeper";
            const maxAttempts = 20;
            const delayMs = 30000;

            // Get all workflow runs for this commit (for mapping check_suite_id -> workflow name)
            const runs = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              head_sha: sha,
            });

            // Build a map of check_suite_id -> workflow name
            const suiteToWorkflow = {};
            runs.data.workflow_runs.forEach(run => {
              suiteToWorkflow[run.check_suite_id] = run.name;
            });

            let allDone = false;
            let attempts = 0;
            let summaryRows = [];

            while (!allDone && attempts < maxAttempts) {
              const checks = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: sha,
              });

              allDone = true;
              summaryRows = [];

              for (const c of checks.data.check_runs) {
                if (c.name.includes("gatekeeper")) continue; // skip self

                const workflowName = suiteToWorkflow[c.check_suite.id] || "UnknownWorkflow";
                summaryRows.push(`| ${workflowName} | ${c.name} | ${c.status} | ${c.conclusion || "—"} |`);

                if (c.status === "completed" && ["failure","cancelled","timed_out","action_required"].includes(c.conclusion)) {
                  const table = ["| Workflow | Check | Status | Conclusion |", "|----------|-------|--------|------------|", ...summaryRows].join("\n");
                  await github.rest.checks.create({
                    owner,
                    repo,
                    name: "Gatekeeper",
                    head_sha: sha,
                    status: "completed",
                    conclusion: "failure",
                    output: {
                      title: "Gatekeeper: PR blocked",
                      summary: "One or more required workflows failed.",
                      text: table,
                    },
                  });
                  core.setFailed(`❌ ${workflowName} / ${c.name} failed`);
                  return;
                }

                if (c.status !== "completed") {
                  allDone = false;
                }
              }

              if (!allDone) {
                console.log("⏳ Some checks still in progress. Retrying in 30s...");
                await new Promise(r => setTimeout(r, delayMs));
                attempts++;
              }
            }

            const table = ["| Workflow | Check | Status | Conclusion |", "|----------|-------|--------|------------|", ...summaryRows].join("\n");

            if (!allDone) {
              await github.rest.checks.create({
                owner,
                repo,
                name: "Gatekeeper",
                head_sha: sha,
                status: "completed",
                conclusion: "failure",
                output: {
                  title: "Gatekeeper: Timeout",
                  summary: "Timed out waiting for workflows to complete.",
                  text: table,
                },
              });
              core.setFailed("⏰ Timeout waiting for all workflows to complete.");
            } else {
              await github.rest.checks.create({
                owner,
                repo,
                name: "Gatekeeper",
                head_sha: sha,
                status: "completed",
                conclusion: "success",
                output: {
                  title: "Gatekeeper: All workflows passed",
                  summary: "All required workflows completed successfully.",
                  text: table,
                },
              });
              console.log("✅ All workflows completed successfully.");
            }
