name: Gatekeeper

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # Allow manual triggering

jobs:
  gatekeeper:
    runs-on: ubuntu-latest
    permissions:
      checks: write       # needed to create a check-run
      pull-requests: read
      actions: read

    steps:
      - name: Wait for all other workflows
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const github = require('@actions/github');

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // ‚úÖ Works for PRs from forks and same repo
            const sha = context.payload.pull_request
              ? context.payload.pull_request.head.sha
              : context.sha;

            let allDone = false;
            let attempts = 0;
            let summaryRows = [];

            while (!allDone && attempts < 20) {
              const checksResp = await github.rest.checks.listForRef({ owner, repo, ref: sha });
              const checks = checksResp.data.check_runs;

              allDone = true;
              summaryRows = [];

              for (const c of checks) {
                if (c.name.includes("gatekeeper")) continue; // skip self

                summaryRows.push(`| ${c.name} | ${c.status} | ${c.conclusion || ''} |`);

                // üö® Fail immediately if a workflow failed
                if (c.status === 'completed' && ['failure','cancelled','timed_out','action_required'].includes(c.conclusion)) {
                  const table = ['| Check | Status | Conclusion |','|-------|--------|------------|', ...summaryRows].join('\n');
                  await github.rest.checks.create({
                    owner, repo, name: 'Gatekeeper', head_sha: sha, status: 'completed', conclusion: 'failure',
                    output: {
                      title: 'Gatekeeper: PR blocked',
                      summary: '‚ùå One or more checks failed.',
                      text: table
                    },
                  });
                  core.setFailed(`‚ùå ${c.name} failed`);
                  return;
                }

                // If not completed, keep waiting
                if (c.status !== "completed") {
                  allDone = false;
                }
              }

              if (!allDone) {
                console.log("‚è≥ Some checks still in progress. Retrying in 30s...");
                await new Promise(r => setTimeout(r, 30000));
                attempts++;
              }
            }

            const table = ['| Check | Status | Conclusion |','|-------|--------|------------|', ...summaryRows].join('\n');

            if (!allDone) {
              await github.rest.checks.create({
                owner, repo, name: 'Gatekeeper', head_sha: sha, status: 'completed', conclusion: 'failure',
                output: {
                  title: 'Gatekeeper: Timeout',
                  summary: '‚è∞ Timed out waiting for checks.',
                  text: table
                },
              });
              core.setFailed("‚è∞ Timeout waiting for all workflows to complete.");
            } else {
              await github.rest.checks.create({
                owner, repo, name: 'Gatekeeper', head_sha: sha, status: 'completed', conclusion: 'success',
                output: {
                  title: 'Gatekeeper: All checks passed',
                  summary: '‚úÖ All required checks completed successfully.',
                  text: table
                },
              });
              console.log("‚úÖ All workflows completed successfully.");
            }
