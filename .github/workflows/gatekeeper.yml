name: Gatekeeper

on:
  workflow_run:
    workflows: ["GitHub Actions Lint", "Copyright Check", "Go Lint/Test/Build", "Markdown Lint", "Shellcheck Lint"]
    types:
      - completed

jobs:
  gatekeeper:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for all checks and report status
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.workflow_run.head_sha;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            const gatekeeperName = "gatekeeper";
            const maxAttempts = 20;
            const delayMs = 30000;

            async function getChecks() {
              const { data } = await github.rest.checks.listForRef({
                owner: repoOwner,
                repo: repoName,
                ref: sha,
              });

              // Filter out Gatekeeper itself
              return data.check_runs.filter(c => c.name !== gatekeeperName);
            }

            async function waitForChecks() {
              for (let attempt = 1; attempt <= maxAttempts; attempt++) {
                const checks = await getChecks();

                const pending = checks.filter(c =>
                  ["queued", "in_progress", "waiting"].includes(c.status)
                );
                const failed = checks.filter(c =>
                  c.status === "completed" && !["success", "skipped"].includes(c.conclusion)
                );

                console.log(`\nüîé Attempt ${attempt}:`);
                checks.forEach(c => console.log("- ${c.name}: status=${c.status}, conclusion=${c.conclusion}");

                if (failed.length > 0) {
                  console.log("‚ùå Some checks failed");
                  return { result: "failure", message: `Some checks failed: ${failed.map(c => c.name).join(", ")}` };
                }

                if (pending.length === 0) {
                  console.log("‚úÖ All checks succeeded or skipped");
                  return { result: "success", message: "All required checks passed" };
                }

                if (attempt < maxAttempts) {
                  console.log(`‚è≥ Still waiting on: ${pending.map(c => c.name).join(", ")}`);
                  await new Promise(r => setTimeout(r, delayMs));
                }
              }
              console.log("‚ö†Ô∏è Timeout reached");
              return { result: "failure", message: "Timeout: some checks never completed" };
            }

            const { result, message } = await waitForChecks();

            // Report status back to PR
            await github.rest.repos.createCommitStatus({
              owner: repoOwner,
              repo: repoName,
              sha,
              state: result,
              context: "Gatekeeper",
              description: message
            });

            // Fail job if Gatekeeper failed
            if (result === "failure") {
              core.setFailed(message);
            }
