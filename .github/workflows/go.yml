# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Lint/Test/Build

on:
  push:
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"
      - "Makefile"
      - ".golangci.yml"
      - ".github/workflows/go.yml"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"
      - "Makefile"
      - ".golangci.yml"
      - ".github/workflows/go.yml"
  workflow_dispatch: # Allow manual triggering

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Extract Go and golangci-lint versions
        id: get-ver
        run: |
          echo "go_version=$(grep '^go ' go.mod | awk '{ print $2 }')" >> "$GITHUB_OUTPUT"
          echo "golangci_version=v$(grep '^GOLANGCI_LINT_VERSION ' Makefile | awk '{ print $3 }')" >> "$GITHUB_OUTPUT"
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.get-ver.outputs.go_version }}
      - name: Install golangci-lint v1
        if: startsWith(steps.get-ver.outputs.golangci_version, 'v1')
        uses: golangci/golangci-lint-action@55c2c1448f86e01eaae002a5a3a9624417608d84 # SHA for v6.5.2
        with:
          args: --disable-all --timeout 5m # disable linting, initialize cache
          version: ${{ steps.get-ver.outputs.golangci_version }}
      - name: Install golangci-lint v2
        if: startsWith(steps.get-ver.outputs.golangci_version, 'v2')
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ steps.get-ver.outputs.golangci_version }}
      - name: Run go fmt (via golangci-lint)
        run: make fmt
      - name: Run lint (via golangci-lint)
        run: make lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Extract Go version
        id: get-ver
        run: |
          echo "go_version=$(grep '^go ' go.mod | awk '{ print $2 }')" >> "$GITHUB_OUTPUT"
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.get-ver.outputs.go_version }}
      - name: Rnn go vet
        run: make vet
      - name: Run go test
        run: make test

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Extract Go version
        id: get-ver
        run: |
          echo "go_version=$(grep '^go ' go.mod | awk '{ print $2 }')" >> "$GITHUB_OUTPUT"
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.get-ver.outputs.go_version }}
      - name: Run go build
        run: make ccm
